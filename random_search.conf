--root-path             .
--script-path 			./script/
--logging
--search-strategy		random
--rnd-exp-number		50
--input-type 			stft
#--config-file

--score-path			score
--script-path			scripts

# set_1 = [square, +cols, +rows, any]
# set_2 = [decrease, encrease, equal, any]

#--max-pool-type 		square,equal,equal	# one combination set_1,set_2,set_2
#--max-pool-shape		[2,5,2,5]		# rows from v[0] and v[1], cols from v[2] and v[3]
#--pool-type			["all","only_end"] 	# one or more of [all, only_end]
--dense-activation		["tanh"]

# --w-reg 		#provare prima senza i reg e constrain poi aggiungerli alla fine per raffinare il risultato
# --b-reg
# --act-reg
# --w-constr
# --b-constr

#--dense-layers-numb=x -> (x*2)+1 lv
--dense-layers-numb		[0,2]			# number from v[0] and v[1]
--dense-shapes			[128,4096]		# number from v[0] and v[1]
--dense-shape-type		equal     	# one of [decrease encrease equal any] # prova priam equal poi varia!

--dropout			[True,False]
#--drop-rate			[0.5,0.6]		# distribuzione normale m=v[1]+v[2]/2, sigma=v[1]-v[2]/4 #emap dice fisso o eventualmente da 0.4 a 0.6

--fit-net
--epoch				300 			    # fisso
#--patiance         50       			# fisso
--optimizer			["adadelta"]		# one of v[.] #fisso lo variamo dopo
#--learning-rate 	[0.0001,0.01]            #da verificare se farla cambiare

--shuffle			[True]			# one of [True,False]
#--bias				[True]			# one of [True,False] 			#solo ture (approfondire)
--batch-size		["1/10","1/10"]		# number from v[0] and v[1] 		# da 1/10 a 1/2 dei train
--loss				["msle"]		# one of v[.] provare msle: con mse in mezzo all epoca schizza da 100 a 60000
--validation-split  0.2             # for the momen is fixed: no range in random search








